package com.yoinami.sarr_mal_api.controller;


import com.yoinami.sarr_mal_api.model.Food;
import com.yoinami.sarr_mal_api.model.MealPlan;
import com.yoinami.sarr_mal_api.payload.GeminiJsonResponse;
import com.yoinami.sarr_mal_api.repository.MealPlanRepository;
import com.yoinami.sarr_mal_api.repository.UserRepository;
import com.yoinami.sarr_mal_api.security.JwtHelperUtils;
import com.yoinami.sarr_mal_api.service.MealPlanService;
import com.yoinami.sarr_mal_api.service.UserService;
import com.yoinami.sarr_mal_api.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;


@Controller
@RequestMapping("/food")
public class FoodController {
    private final ControllerHelper controllerHelper;
    private final MealPlanRepository mealPlanRepository;

    @Autowired
    private UserService userService;

    @Autowired
    private JwtHelperUtils jwtHelperUtils;

    @Autowired
    private MealPlanService mealPlanService;
    @Autowired
    private UserRepository userRepository;

    public FoodController(ControllerHelper controllerHelper, MealPlanRepository mealPlanRepository) {
        this.controllerHelper = controllerHelper;
        this.mealPlanRepository = mealPlanRepository;
    }
    /*
     * We will call Food Generated By AI "Recommended Food", Food confirmed by User will be "Meal Plan"
     * Recommended Food --confirm--> MealPlan --eaten--> FoodHistory
     * */

    //Get recommended food
    @GetMapping("/getRecommededFood")
    @ResponseBody
    public String getRecommendFood(
            @CookieValue(value = "JWT", defaultValue = "null") String token,
            @RequestParam(name = "sugarLevel", defaultValue = "100") float sugarLevel,
            @RequestParam(name = "preferred", defaultValue = "None") String preferred,
            @RequestParam(name = "foodType", defaultValue = "None") String foodType ) {

        User user = userRepository.findItemByName(jwtHelperUtils.getUsernameFromToken(token));
        try {
            String str = controllerHelper.formatGeminiRequestBody(
                    controllerHelper.formatGeminiRequestJson(user , preferred, foodType, sugarLevel)
            );
            System.out.println(str);
            return str;
        } catch (Exception e) {
            return e.getMessage();
        }
    }

    //IDEA: we can just put id in the JWT claims in order to reduce read query to the database
    @GetMapping("/generateRecommendedFood")
    public ResponseEntity<MealPlan> generateRecommendedFood(
            @CookieValue(value = "JWT", defaultValue = "null") String token,
            @RequestParam(name = "sugarLevel", defaultValue = "100") float sugarLevel,
            @RequestParam(name = "preferred", defaultValue = "None") String preferred,
            @RequestParam(name = "foodType", defaultValue = "None") String foodType ) {
        try {
            User user = userRepository.findItemByName(jwtHelperUtils.getUsernameFromToken(token));
            String requestBody = controllerHelper.formatGeminiRequestBody(
                    controllerHelper.formatGeminiRequestJson(user , preferred, foodType, sugarLevel)
            );
            GeminiJsonResponse geminiJsonResponse = controllerHelper.generateRecommendedFoodFromGemini(requestBody);
            MealPlan recommendedFood = getRecommendedFood(geminiJsonResponse);
            recommendedFood = mealPlanService.putMealPlanImage(recommendedFood);

            return ResponseEntity.ok(recommendedFood);

        } catch (Exception e) {
            MealPlan mp = new MealPlan();
            mp.setId(e.getMessage());
            return ResponseEntity.badRequest().body(mp);
        }
    }

    private static MealPlan getRecommendedFood(GeminiJsonResponse geminiJsonResponse) {
        MealPlan recommendedFood = new MealPlan();
        recommendedFood.setBreakfast_main(geminiJsonResponse.getResponse().getBreakfast().getMainDish());
        recommendedFood.setBreakfast_side(geminiJsonResponse.getResponse().getBreakfast().getSideDish());
        recommendedFood.setLunch_main(geminiJsonResponse.getResponse().getLunch().getMainDish());
        recommendedFood.setLunch_side(geminiJsonResponse.getResponse().getLunch().getSideDish());
        recommendedFood.setDinner_main(geminiJsonResponse.getResponse().getDinner().getMainDish());
        recommendedFood.setDinner_side(geminiJsonResponse.getResponse().getDinner().getSideDish());
        recommendedFood.setCreatedAt(LocalDateTime.now());

        return recommendedFood;
    }

    //IDEA: we can just put id in the JWT claims in order to reduce read query to the database
    @PostMapping("/confrimRecommendedFood")
    public ResponseEntity<String> confirmRecommendedFood(@RequestBody MealPlan mealPlan,
                                                         @CookieValue(value = "JWT", defaultValue = "null") String token) {
        if (mealPlan == null) {
            return ResponseEntity.badRequest().body("MealPlan is null or invalid");
        }
        mealPlan.setUserId(userService.getUserIdByUsername(jwtHelperUtils.getUsernameFromToken(token)));
        mealPlan.setCreatedAt(LocalDateTime.now());
        mealPlanRepository.save(mealPlan);

        String confirmationMessage = "Recommended MealPlan confirmed successfully!";
        return ResponseEntity.ok(confirmationMessage);
    }

    //IDEA: we can just put id in the JWT claims in order to reduce read query to the database
    @GetMapping("/getMealPlan")
    public String getMealPlan(Model model, @CookieValue(value = "JWT", defaultValue = "null") String token) {
        MealPlan mealPlan = mealPlanRepository.findTopByUserIdOrderByCreatedAtDesc(
                userService.getUserIdByUsername(jwtHelperUtils.getUsernameFromToken(token)));
        if (mealPlan != null) {
            LocalDateTime now = LocalDateTime.now();
            if(mealPlan.getCreatedAt().toLocalDate().equals(now.toLocalDate()))
                model.addAttribute("mealPlan", mealPlan);
        }
        return "recommendedfood";
    }

    @GetMapping("/getMealPlanHistoryView")
    public String getMealPlanById() {
        return "mealplanhistory";
    }

    @PutMapping("/tickMealPlan")
    public ResponseEntity<String> tickMealPlan(@RequestParam(name = "id") String mealPlanId,
                                                 @RequestParam(name = "meal") String mealTime) {
        if (mealPlanId == null || mealTime == null) {
            return ResponseEntity.badRequest().body("mealPlanId and meal time are null");
        }
        try {
            LocalDateTime now = LocalDateTime.now();
            mealPlanService.updateEatenAt(mealPlanId, mealTime, now);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
        return ResponseEntity.ok("Success");
    }

    @GetMapping("/getFoodHistory")
    @ResponseBody
    public List<Food> getFoodHistory(@CookieValue(value = "JWT", defaultValue = "null") String token) {
        try {
            User user = userRepository.findItemByName(jwtHelperUtils.getUsernameFromToken(token));
            return mealPlanService.getEatenFoods(user.getId());
        } catch (Exception e) {
            return null;
        }
    }

    @GetMapping("/getAllMealPlan")
    @ResponseBody
    public List<MealPlan> getFoodDetail(@CookieValue(value = "JWT", defaultValue = "null") String token) {
        try {
            User user = userRepository.findItemByName(jwtHelperUtils.getUsernameFromToken(token));
            return mealPlanRepository.findAllMealPlanByUserId(user.getId());
        } catch (Exception e) {
            return null;
        }
    }
}
